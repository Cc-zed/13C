#include <iostream>

using namespace std;

const int MAX_ROWS = 100;
const int MAX_COLS = 100;

// Task 1
void addColumn(int matrix[][MAX_COLS], int& rows, int& cols, int position, int newValue) {
    if (position < 0 || position > cols) {
        cout << "Invalid position to add column." << endl;
        return;
    }

    for (int i = 0; i < rows; ++i) {
        for (int j = cols; j > position; --j) {
            matrix[i][j] = matrix[i][j - 1];
        }
        matrix[i][position] = newValue;
    }

    ++cols;
}

// Task 2
void deleteColumn(int matrix[][MAX_COLS], int& rows, int& cols, int position) {
    if (position < 0 || position >= cols) {
        cout << "Invalid position to delete column." << endl;
        return;
    }

    for (int i = 0; i < rows; ++i) {
        for (int j = position; j < cols - 1; ++j) {
            matrix[i][j] = matrix[i][j + 1];
        }
    }

    --cols;
}

// Task 3:
void cyclicShift(int matrix[][MAX_COLS], int rows, int cols, int numShifts, char direction, char dimension) {
    if (dimension == 'r') { // Shift rows
        for (int i = 0; i < rows; ++i) {
            int temp[MAX_COLS];
            for (int j = 0; j < cols; ++j) {
                if (direction == 'l') { // Shift left
                    temp[j] = matrix[i][(j + numShifts) % cols];
                }
                else { // Shift right
                    temp[j] = matrix[i][(j - numShifts + cols) % cols];
                }
            }
            for (int j = 0; j < cols; ++j) {
                matrix[i][j] = temp[j];
            }
        }
    }
    else { // Shift columns
        for (int j = 0; j < cols; ++j) {
            int temp[MAX_ROWS];
            for (int i = 0; i < rows; ++i) {
                if (direction == 'u') { // Shift up
                    temp[i] = matrix[(i + numShifts) % rows][j];
                }
                else { // Shift down
                    temp[i] = matrix[(i - numShifts + rows) % rows][j];
                }
            }
            for (int i = 0; i < rows; ++i) {
                matrix[i][j] = temp[i];
            }
        }
    }
}

int main() {
    int rows, cols;

    // Input
    cout << "Enter the number of rows: ";
    cin >> rows;
    cout << "Enter the number of columns: ";
    cin >> cols;

    // Input
    int matrix[MAX_ROWS][MAX_COLS];
    cout << "Enter the elements of the matrix:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cin >> matrix[i][j];
        }
    }

    // Task 1
    int position, newValue;
    cout << "Enter the position to add a new column: ";
    cin >> position;
    cout << "Enter the value for the new column: ";
    cin >> newValue;
    addColumn(matrix, rows, cols, position, newValue);

    // Output
    cout << "Matrix after adding column:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // Task 2
    cout << "Enter the position of the column to delete: ";
    cin >> position;
    deleteColumn(matrix, rows, cols, position);

    // Output
    cout << "Matrix after deleting column:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // Task 3
    int numShifts;
    char direction, dimension;
    cout << "Enter the number of shifts: ";
    cin >> numShifts;
    cout << "Enter the direction of shift (l for left, r for right, u for up, d for down): ";
    cin >> direction;
    cout << "Enter the dimension to shift (r for rows, c for columns): ";
    cin >> dimension;
    cyclicShift(matrix, rows, cols, numShifts, direction, dimension);

    // Output
    cout << "Matrix after cyclic shift:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
