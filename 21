#include <iostream>
#include <cstring>
#include <cstdlib>

using namespace std;

void transposeMatrix(int** matrix, int rows, int columns) {
    int** transposedMatrix = new int* [columns];
    for (int i = 0; i < columns; ++i) {
        transposedMatrix[i] = new int[rows];
    }

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < columns; ++j) {
            transposedMatrix[j][i] = matrix[i][j];
        }
    }

    cout << "Transposed matrix:" << endl;
    for (int i = 0; i < columns; ++i) {
        for (int j = 0; j < rows; ++j) {
            cout << transposedMatrix[i][j] << " ";
        }
        cout << endl;
    }

    for (int i = 0; i < columns; ++i) {
        delete[] transposedMatrix[i];
    }
    delete[] transposedMatrix;
}

const int MAX_RECORDS = 100;
const int MAX_NAME_LENGTH = 50;
const int MAX_PHONE_LENGTH = 20;

struct Record {
    char name[MAX_NAME_LENGTH];
    char phone[MAX_PHONE_LENGTH];
};

void searchByName(const Record records[], int numRecords, const char* name) {
    bool found = false;
    for (int i = 0; i < numRecords; ++i) {
        if (strcmp(records[i].name, name) == 0) {
            cout << "Name: " << records[i].name << ", Phone: " << records[i].phone << endl;
            found = true;
            break;
        }
    }
    if (!found) {
        cout << "Record with name \"" << name << "\" not found." << endl;
    }
}

void searchByPhone(const Record records[], int numRecords, const char* phone) {
    bool found = false;
    for (int i = 0; i < numRecords; ++i) {
        if (strcmp(records[i].phone, phone) == 0) {
            cout << "Name: " << records[i].name << ", Phone: " << records[i].phone << endl;
            found = true;
            break;
        }
    }
    if (!found) {
        cout << "Record with phone number \"" << phone << "\" not found." << endl;
    }
}

int main() {
    int rows, columns;
    cout << "Enter number of rows: ";
    cin >> rows;

    cout << "Enter number of columns: ";
    cin >> columns;
    cin.ignore();

    int** matrix = new int* [rows];
    for (int i = 0; i < rows; ++i) {
        matrix[i] = new int[columns];
    }

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < columns; ++j) {
            cin >> matrix[i][j];
        }
    }

    transposeMatrix(matrix, rows, columns);

    for (int i = 0; i < rows; ++i) {
        delete[] matrix[i];
    }
    delete[] matrix;

    Record records[MAX_RECORDS];
    int numRecords = 0;

    char choice;
    do {
        cout << "Enter name: ";
        cin.ignore();
        cin.getline(records[numRecords].name, MAX_NAME_LENGTH);

        cout << "Enter phone: ";
        cin.getline(records[numRecords].phone, MAX_PHONE_LENGTH);

        ++numRecords;

        cout << "Do you want to add another record? (y/n): ";
        cin >> choice;
        cin.ignore();
    } while (choice == 'y' && numRecords < MAX_RECORDS);


    cout << "Records added:" << endl;
    for (int i = 0; i < numRecords; ++i) {
        cout << "Name: " << records[i].name << ", Phone: " << records[i].phone << endl;
    }

    char searchName[MAX_NAME_LENGTH];
    cout << "Enter name to search: ";
    cin.getline(searchName, MAX_NAME_LENGTH);
    searchByName(records, numRecords, searchName);

    char searchPhone[MAX_PHONE_LENGTH];
    cout << "Enter phone number to search: ";
    cin.getline(searchPhone, MAX_PHONE_LENGTH);
    searchByPhone(records, numRecords, searchPhone);

    return 0;
}
